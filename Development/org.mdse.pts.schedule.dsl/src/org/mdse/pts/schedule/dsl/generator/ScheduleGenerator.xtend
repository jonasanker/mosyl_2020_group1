/*
 * generated by Xtext 2.20.0
 */
package org.mdse.pts.schedule.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.mdse.pts.common.util.EclipseUtil
import org.mdse.pts.common.util.EcoreIOUtil
import org.mdse.pts.schedule.Schedule
import org.mdse.pts.schedule.interpreter.ScheduleInterpreter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ScheduleGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		println("TEST!!");
		//project -> buil dautomatically
		//TODO: Generate
		var interpreter = new ScheduleInterpreter()
		var schedule = resource.contents.get(0) as Schedule
		var timetables = interpreter.interpret(schedule)
		/*for(String stationName : timetables.keySet()) {
			println("-------------")
			println(stationName)
			println("arrivals")
			for(Arrival arr : timetables.get(stationName).getArrivals()) {
				println(arr.getWeekDay() + " - " + arr.getTime())
			}
			println("departures")
			for(Departure dep : timetables.get(stationName).getDepartures()) {
				println(dep.getWeekDay() + " - " + dep.getTime())
			}
			println("-------------")
			

		  }*/
//		  EcoreIOUtil.s

		//IFile file = null;
		var project = EclipseUtil.resolveProjectFromResource(resource);
		var folder = project.getFolder("timetables");
		
		//TODO: Do this for all timetables
		var file = folder.getFile("Hillerod.timetable");
		EclipseUtil.ensureFolderStructure(file);
		EcoreIOUtil.saveModelAs(timetables.get("Hillerod"), file);
		
		//TODO: get actual HTML code
		//var html = "Hello World";
		//EclipseUtil.writeToFile(html, file);
		
		EclipseUtil.refreshResource(folder);
	}
	
}
