/*
 * generated by Xtext 2.20.0
 */
grammar InternalSchedule;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mdse.pts.schedule.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mdse.pts.schedule.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mdse.pts.schedule.dsl.services.ScheduleGrammarAccess;

}

@parser::members {

 	private ScheduleGrammarAccess grammarAccess;

    public InternalScheduleParser(TokenStream input, ScheduleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Schedule";
   	}

   	@Override
   	protected ScheduleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	iv_ruleSchedule=ruleSchedule
	{ $current=$iv_ruleSchedule.current; }
	EOF;

// Rule Schedule
ruleSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='schedule'
		{
			newLeafNode(otherlv_0, grammarAccess.getScheduleAccess().getScheduleKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScheduleAccess().getScheduleAction_1(),
					$current);
			}
		)
	)
;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('_'|RULE_LETTER) ('_'|RULE_LETTER|RULE_DIGIT)*;

RULE_INT : RULE_DIGIT+;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
